// src/index.ts
import { readFileSync, writeFileSync } from "fs";
function zaloMiniApp(options) {
  const config = {
    name: "vite-plugin-zalo-mini-app",
    config(config2, env) {
      const maOptions = options ?? JSON.parse(readFileSync("./app-config.json", { encoding: "utf-8" }));
      return {
        base: env.command === "serve" ? config2.base : "./",
        build: {
          outDir: config2.build?.outDir || "www",
          target: config2.build?.target || "es2015",
          cssTarget: config2.build?.cssTarget || ["es2015", "safari13.1"],
          rollupOptions: {
            ...config2.build?.rollupOptions,
            output: {
              entryFileNames: "assets/[name].[hash].module.js",
              chunkFileNames: "assets/[name].[hash].module.js",
              ...config2.build?.rollupOptions?.output
            },
            plugins: [
              ...[config2.build?.rollupOptions?.plugins],
              {
                name: "vite-plugin-zalo-mini-app",
                writeBundle(options2, bundle) {
                  const output = Object.values(bundle);
                  const outputMap = /* @__PURE__ */ new Map();
                  output.forEach((obj) => {
                    outputMap.set(obj.fileName, obj);
                  });
                  const jsFiles = output.filter((file) => {
                    return file.type === "chunk" && file.isEntry;
                  });
                  const modulePreloadFiles = [];
                  const getImportedChunks = (chunk, seen = /* @__PURE__ */ new Set()) => {
                    const chunks = [];
                    chunk.imports.forEach((file) => {
                      const importee = outputMap.get(file);
                      if (importee?.type === "chunk" && !seen.has(file)) {
                        seen.add(file);
                        chunks.push(...getImportedChunks(importee, seen));
                        chunks.push(importee);
                      }
                    });
                    return chunks;
                  };
                  jsFiles.forEach((file) => {
                    const chunks = getImportedChunks(file);
                    modulePreloadFiles.push(...chunks);
                  });
                  const cssFiles = output.filter((file) => {
                    if (file.type !== "asset" || !file.fileName.endsWith(".css"))
                      return false;
                    return true;
                  });
                  const appConfigJson = {
                    app: maOptions.app,
                    listCSS: [
                      ...cssFiles.map((f) => f.fileName),
                      ...maOptions.listCSS || []
                    ],
                    listSyncJS: [
                      ...jsFiles.map((f) => f.fileName),
                      ...maOptions.listSyncJS || []
                    ],
                    listAsyncJS: [
                      ...modulePreloadFiles.map((f) => f.fileName),
                      ...maOptions.listAsyncJS || []
                    ],
                    pages: []
                  };
                  writeFileSync(
                    `${options2.dir}/app-config.json`,
                    JSON.stringify(appConfigJson)
                  );
                }
              }
            ]
          }
        }
      };
    }
  };
  return config;
}
export {
  zaloMiniApp as default
};
